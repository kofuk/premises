name: Build and Publish
on:
  push:
  release:
    types: [published]

jobs:
  protocol-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract protocol version
        id: extract
        run: |
          version=$(grep -F ProtocolVersion internal/version.go | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}')
          echo "version=${version}" >>"${GITHUB_OUTPUT}"

  go-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Check format
        run: |
          set -euo pipefail
          test "$(go fmt ./... | tee /dev/stderr | wc -l)" -eq 0
      - name: Run test
        run: go test -v -cover -coverprofile=coverprofile ./...
      - name: Create coverage report
        run: go tool cover -html=coverprofile -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: runner-coverage
          path: ./coverage.html
          retention-days: 1

  build-test-tool:
    runs-on: ubuntu-latest
    needs:
      - go-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Build ostack-fake
        run: |
          cd cmd/ostack-fake
          go build -o ostack-fake .
      - uses: actions/upload-artifact@v4
        with:
          name: test-tool
          path: ./cmd/ostack-fake/ostack-fake
          retention-days: 1

  build-runner:
    needs:
      - go-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Build
        run: |
          cd runner/cmd/premises-runner
          ldflags="-X github.com/kofuk/premises/runner/internal/metadata.Revision=${COMMIT_HASH}"
          CGO_ENABLED=0 go build -o premises-runner -ldflags "${ldflags}" .
        env:
          COMMIT_HASH: ${{ github.sha }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: runner
          path: ./runner/cmd/premises-runner/premises-runner
          retention-days: 1

  test-controlpanel-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./controlpanel/frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-controlpanel-${{ hashFiles('controlpanel/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-controlpanel-
      - name: Install dependencies
        run: |
          npm ci
      - uses: actions/cache/save@v4
        if: ${{ steps.cache.outputs.cache-hit != 'true' && !startsWith(github.ref_name, 'dependabot/') }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-controlpanel-${{ hashFiles('controlpanel/frontend/package-lock.json') }}
      - name: Check code formatted
        run: |
          npm run fmt:check
          npm run lint:check
      - name: Run unit tests
        run: |
          npm test

  build-controlpanel:
    needs:
      - test-controlpanel-frontend
      - go-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        if: ${{ startsWith(github.ref_name, 'dependabot/') }}
        with:
          context: . # project root
          tags: ghcr.io/kofuk/premises:latest
          outputs: type=docker,dest=image.tar
          cache-from: type=gha
      - uses: docker/build-push-action@v6
        if: ${{ !startsWith(github.ref_name, 'dependabot/') }}
        with:
          context: . # project root
          tags: ghcr.io/kofuk/premises:latest
          outputs: type=docker,dest=image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: controlpanel-image
          path: image.tar
          retention-days: 1

  integ-test:
    runs-on: ubuntu-latest
    needs:
      - build-runner
      - build-controlpanel
      - build-test-tool
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Download controlpanel Docker image
        uses: actions/download-artifact@v4
        with:
          name: controlpanel-image
      - name: Make directory for tools
        run: |
          mkdir bin
          echo "$(pwd)/bin" >>"${GITHUB_PATH}"
      - name: Download runner
        uses: actions/download-artifact@v4
        with:
          name: runner
          path: ./bin
      - name: Download test tool
        uses: actions/download-artifact@v4
        with:
          name: test-tool
          path: ./bin
      - name: Load image
        run: docker load --input image.tar
      - name: Prepare binaries
        run: |
          mkdir /tmp/premises
          mv bin/premises-runner /tmp/premises
          chmod +x bin/*
      - name: Launch MinIO
        run: |
          docker run -d \
              -p 9001:9001 \
              -p 9000:9000 \
              -e MINIO_ROOT_USER=premises \
              -e MINIO_ROOT_PASSWORD=password \
              --entrypoint /bin/bash \
              quay.io/minio/minio \
              '-c' 'mkdir -p /data/premises && minio server /data --console-address :9001'
          for i in {1..20}; do
            curl http://localhost:9001 && break
            sleep 3
          done
      - name: Launch ostack-fake
        run: |
          export DOCKER_API_VERSION="$(docker version --format '{{ .Server.APIVersion }}' | tee /dev/stderr)"
          export EXTRA_HOSTS='host.docker.internal:127.0.0.1'
          ostack-fake &
          for i in {1..20}; do
            curl -f http://localhost:8010/health && break
            sleep 3
          done
      - name: Launch app
        run: |
          docker compose --env-file tests/integ/test.env -f compose.yaml -f tests/integ/compose-test.yaml run --rm web /premises migrate
          docker compose --env-file tests/integ/test.env -f compose.yaml -f tests/integ/compose-test.yaml run --rm web pmctl user add -u admin -p password --initialized
          docker compose --env-file tests/integ/test.env -f compose.yaml -f tests/integ/compose-test.yaml up -d
          for i in {1..20}; do
            curl -f http://localhost:8000/ && break
            sleep 3
          done
      - name: Launch proxy
        run: |
          docker container run \
            --env-file tests/integ/test.env \
            --network host \
            -e PREMISES_MODE=proxy \
            -e PREMISES_REDIS_ADDRESS=localhost:6379 \
            --read-only \
            -d \
            ghcr.io/kofuk/premises:latest
      - name: Build base image for ostack-fake
        run: |
          ./.devcontainer/fake-runner/build_base_image.sh
      - name: Run test
        run: |
          export TARGET_HOST='http://localhost:8000'
          export USING_MCSERVER_FAKE='yes'

          cd tests/integ
          ./run_test.sh

  publish-binaries:
    runs-on: ubuntu-latest
    needs:
      - protocol-version
      - integ-test
    if: github.event_name == 'release'
    env:
      PROTOCOL_VERSION: ${{ needs.protocol-version.outputs.version }}
    steps:
      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y tar
      - name: Download runner
        uses: actions/download-artifact@v4
        with:
          name: runner
      - name: Make binaries executable
        run: |
          chmod +x premises-runner
      - name: Create Archive
        run : |
          tar -czf "premises-runner@${PROTOCOL_VERSION}.tar.gz" premises-runner
      - name: Generate metadata
        run: |
          echo ${{ github.sha }} >"version@${PROTOCOL_VERSION}.txt"
      - name: Upload Artifacts
        run: |
          aws s3 cp "premises-runner@${PROTOCOL_VERSION}.tar.gz" s3://premises/artifacts/runner/
          aws s3 cp "version@${PROTOCOL_VERSION}.txt" s3://premises/artifacts/runner/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
          AWS_DEFAULT_REGION: auto

  publish-controlpanel-docker-image:
    runs-on: ubuntu-latest
    needs: integ-test
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Generate tag name
        run: |
          echo "IMAGE_TAG=${TAG_NAME#v}" >>"${GITHUB_ENV}"
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: controlpanel-image
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load image
        run: |
          docker load --input image.tar
          docker tag ghcr.io/kofuk/premises:latest "ghcr.io/kofuk/premises:${IMAGE_TAG}"
      - name: Push image
        run: docker push "ghcr.io/kofuk/premises:${IMAGE_TAG}"

  publish-helm-chart:
    runs-on: ubuntu-latest
    needs: integ-test
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-helm@v4
      - name: Download existing index
        run: |
          aws s3 cp s3://premises/charts/index.yaml index.yaml || \
              helm repo index --url https://premises.kofuk.org/charts .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
          AWS_DEFAULT_REGION: auto
      - name: Package Helm chart
        run: helm package charts/premises
      - name: Add Helm chart to index
        run: helm repo index --merge index.yaml --url https://premises.kofuk.org/charts .
      - name: Upload Helm chart
        run: |
          aws s3 cp premises-*.tgz s3://premises/charts/
          aws s3 cp index.yaml s3://premises/charts/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
          AWS_DEFAULT_REGION: auto
