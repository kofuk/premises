name: Build and Publish
on: push

jobs:
  go-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Check format
        run: |
          set -euo pipefail
          test "$(go fmt ./... | tee /dev/stderr | wc -l)" -eq 0
      - name: Run test
        run: go test -v -cover -coverprofile=coverprofile ./...
      - name: Create coverage report
        run: go tool cover -html=coverprofile -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: runner-coverage
          path: ./coverage.html
          retention-days: 1

  build-test-tool:
    runs-on: ubuntu-latest
    needs:
      - go-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Build ostack-fake
        run: |
          cd ostack-fake
          go build -o ostack-fake .
      - uses: actions/upload-artifact@v4
        with:
          name: test-tool
          path: ./ostack-fake/ostack-fake
          retention-days: 1

  build-runner:
    needs:
      - go-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y make
      - name: Build
        run: |
          cd runner
          make
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: runner
          path: ./runner/premises-runner
          retention-days: 1

  test-controlpanel-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./controlpanel
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-controlpanel-${{ hashFiles('controlpanel/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-controlpanel-
      - name: Install dependencies
        run: |
          npm ci
      - uses: actions/cache/save@v4
        if: ${{ steps.cache.outputs.cache-hit != 'true' && !startsWith(github.ref_name, 'dependabot/') }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-controlpanel-${{ hashFiles('controlpanel/package-lock.json') }}
      - name: Check code formatted
        run: |
          npm run fmt:check
          npm run lint:check
      - name: Run unit tests
        run: |
          npm test

  build-controlpanel:
    needs:
      - test-controlpanel-frontend
      - go-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # project root
          tags: ghcr.io/kofuk/premises:latest
          outputs: type=docker,dest=image.tar
          cache-from: type=gha
          cache-to: ${{ !startsWith(github.ref_name, 'dependabot/') && 'type=gha,mode=max' }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: control-panel-image
          path: image.tar
          retention-days: 1

  integ-test:
    runs-on: ubuntu-latest
    needs:
      - build-runner
      - build-controlpanel
      - build-test-tool
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Download controlpanel Docker image
        uses: actions/download-artifact@v4
        with:
          name: control-panel-image
      - name: Make directory for tools
        run: |
          mkdir bin
          echo "$(pwd)/bin" >>"${GITHUB_PATH}"
      - name: Download runner
        uses: actions/download-artifact@v4
        with:
          name: runner
          path: ./bin
      - name: Download test tool
        uses: actions/download-artifact@v4
        with:
          name: test-tool
          path: ./bin
      - name: Load image
        run: docker load --input image.tar
      - name: Prepare services
        run: |
          mkdir /tmp/premises
          mv bin/premises-runner /tmp/premises
          chmod +x bin/*

          echo '::group::Launch MinIO'
          docker run -d -p 9001:9001 -p 9000:9000 -e MINIO_ROOT_USER=premises -e MINIO_ROOT_PASSWORD=password --entrypoint /bin/bash quay.io/minio/minio '-c' 'mkdir -p /data/premises && minio server /data --console-address :9001'
          for i in {1..20}; do
            curl http://localhost:9001 && break
            sleep 3
          done
          echo '::endgroup::'

          echo '::group::Launch ostack-fake'
          DOCKER_API_VERSION="$(docker version --format '{{ .Server.APIVersion }}' | tee /dev/stderr)" ostack-fake &
          for i in {1..20}; do
            curl -f http://localhost:8010/health && break
            sleep 3
          done
          echo '::endgroup::'

          echo '::group::Launch app'
          docker compose --env-file tests/test.env -f compose.yaml -f tests/compose-test.yaml up -d
          for i in {1..20}; do
            curl -f http://localhost:8000/ && break
            sleep 3
          done
          echo '::endgroup::'

          echo '::group::Create test user'
          docker compose --env-file tests/test.env exec web pmctl user add -u user1 -p password1
          echo '::endgroup::'

          echo '::group::Build base image for ostack-fake'
          ./dev/build_base_image.sh
          echo '::endgroup::'
      - name: Run test
        run: |
          cd tests
          ./run_all_tests.sh

  publish-binaries:
    runs-on: ubuntu-latest
    needs: integ-test
    if: github.ref_name == 'master'
    permissions:
      id-token: write
      contents: read
    env:
      RUNNER_SCHEMA: '3'
    steps:
      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y tar
      - name: Download runner
        uses: actions/download-artifact@v4
        with:
          name: runner
      - name: Make binaries executable
        run: |
          chmod +x premises-runner
      - name: Create Archive
        run : |
          tar -czf "premises-runner@v${RUNNER_SCHEMA}.tar.gz" premises-runner
      - name: Generate metadata
        run: |
          echo ${{ github.sha }} >"version@v${RUNNER_SCHEMA}.txt"
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GOOGLE_SERVICE_ACCOUNT }}
      - uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: premises-runner@v${{ env.RUNNER_SCHEMA }}.tar.gz
          destination: premises
          parent: false
          process_gcloudignore: false
      - uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: version@v${{ env.RUNNER_SCHEMA }}.txt
          destination: premises
          parent: false
          process_gcloudignore: false


  publish-controlpanel-docker-image:
    runs-on: ubuntu-latest
    needs: integ-test
    if: github.ref_name == 'master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: control-panel-image
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load image
        run: docker load --input image.tar
      - name: Push image
        run: docker push ghcr.io/kofuk/premises:latest
