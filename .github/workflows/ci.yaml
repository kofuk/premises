name: CI
on: push

jobs:
  check-format-mcmanager:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mcmanager
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: mcmanager/go.mod
          cache-dependency-path: |
            mcmanager/go.sum
      - name: Check format
        run: |
          set -euo pipefail
          test "$(go fmt ./... | tee /dev/stderr | wc -l)" -eq 0

  test-mcmanager:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mcmanager
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: mcmanager/go.mod
          cache-dependency-path: |
            mcmanager/go.sum
      - name: Run test
        run: go test -v -cover -coverprofile=coverprofile ./...
      - name: Create coverage report
        run: go tool cover -html=coverprofile -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: mcmanager-coverage
          path: ./mcmanager/coverage.html

  check-format-controlpanel-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./controlpanel
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('controlpanel/package-lock.json') }}
      - name: Check code formatted
        run: |
          set -euo pipefail
          npm ci
          npm run fmt:check

  check-format-controlpanel-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./controlpanel
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: controlpanel/go.mod
          cache-dependency-path: |
            controlpanel/go.sum
      - name: Check format
        run: |
          set -euo pipefail
          test "$(go fmt ./... | tee /dev/stderr | wc -l)" -eq 0

  check-format-e2e:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./e2e-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('e2e-tests/package-lock.json') }}
      - name: Check code formatted
        run: |
          set -euo pipefail
          npm ci
          npm run fmt:check

  test-controlpanel-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./controlpanel
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: controlpanel/go.mod
          cache-dependency-path: |
            controlpanel/go.sum
      - name: Run test
        run: go test -v -cover -coverprofile=coverprofile ./...
      - name: Create coverage report
        run: go tool cover -html=coverprofile -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: controlpanel-coverage
          path: ./controlpanel/coverage.html

  build-mcmanager:
    needs:
      - check-format-mcmanager
      - test-mcmanager
      - check-format-controlpanel-frontend
      - check-format-controlpanel-backend
      - test-controlpanel-backend
    uses: ./.github/workflows/build-mcmanager.yaml

  build-controlpanel:
    needs:
      - test-mcmanager
      - check-format-controlpanel-frontend
      - test-controlpanel-backend
    uses: ./.github/workflows/build-controlpanel.yaml
    with:
      tag: ghcr.io/kofuk/premises:latest

  publish-mcmanager:
    runs-on: ubuntu-latest
    needs: build-mcmanager
    if: github.ref_name == 'master'
    steps:
      - name: Install Required Packages
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y tar xz-utils
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: mcmanager
      - name: Create Archive
        run : tar -cJf premises-mcmanager.tar.xz premises-mcmanager
      - name: Generate Metadata
        run: |
          echo "$(head -c7 <<<${{ github.sha }})	$(sha512sum premises-mcmanager | cut -d\  -f1)" >metadata.txt
      - uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
      - uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: premises-mcmanager.tar.xz
          destination: premises-artifacts
          parent: false
          process_gcloudignore: false
      - uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: metadata.txt
          destination: premises-artifacts
          parent: false
          process_gcloudignore: false


  publish-controlpanel-docker-image:
    runs-on: ubuntu-latest
    needs: build-controlpanel
    if: github.ref_name == 'master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: control-panel-image
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load image
        run: docker load --input image.tar
      - name: Push image
        run: docker push ghcr.io/kofuk/premises:latest
