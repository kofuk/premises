// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kofuk/premises/runner/internal/commands/mclauncher/core (interfaces: LauncherContext)
//
// Generated by this command:
//
//	mockgen -destination context_mock.go -package core . LauncherContext
//

// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"

	env "github.com/kofuk/premises/runner/internal/env"
	gomock "go.uber.org/mock/gomock"
)

// MockLauncherContext is a mock of LauncherContext interface.
type MockLauncherContext struct {
	ctrl     *gomock.Controller
	recorder *MockLauncherContextMockRecorder
	isgomock struct{}
}

// MockLauncherContextMockRecorder is the mock recorder for MockLauncherContext.
type MockLauncherContextMockRecorder struct {
	mock *MockLauncherContext
}

// NewMockLauncherContext creates a new mock instance.
func NewMockLauncherContext(ctrl *gomock.Controller) *MockLauncherContext {
	mock := &MockLauncherContext{ctrl: ctrl}
	mock.recorder = &MockLauncherContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLauncherContext) EXPECT() *MockLauncherContextMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLauncherContext) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLauncherContextMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLauncherContext)(nil).Context))
}

// Env mocks base method.
func (m *MockLauncherContext) Env() env.EnvProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env")
	ret0, _ := ret[0].(env.EnvProvider)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *MockLauncherContextMockRecorder) Env() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*MockLauncherContext)(nil).Env))
}

// Settings mocks base method.
func (m *MockLauncherContext) Settings() SettingsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings")
	ret0, _ := ret[0].(SettingsRepository)
	return ret0
}

// Settings indicates an expected call of Settings.
func (mr *MockLauncherContextMockRecorder) Settings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockLauncherContext)(nil).Settings))
}

// State mocks base method.
func (m *MockLauncherContext) State() StateRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(StateRepository)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockLauncherContextMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockLauncherContext)(nil).State))
}
