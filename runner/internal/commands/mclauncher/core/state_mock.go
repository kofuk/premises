// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kofuk/premises/runner/internal/commands/mclauncher/core (interfaces: StateRepository)
//
// Generated by this command:
//
//	mockgen -destination state_mock.go -package core . StateRepository
//

// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStateRepository is a mock of StateRepository interface.
type MockStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStateRepositoryMockRecorder
	isgomock struct{}
}

// MockStateRepositoryMockRecorder is the mock recorder for MockStateRepository.
type MockStateRepositoryMockRecorder struct {
	mock *MockStateRepository
}

// NewMockStateRepository creates a new mock instance.
func NewMockStateRepository(ctrl *gomock.Controller) *MockStateRepository {
	mock := &MockStateRepository{ctrl: ctrl}
	mock.recorder = &MockStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateRepository) EXPECT() *MockStateRepositoryMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockStateRepository) GetState(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockStateRepositoryMockRecorder) GetState(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateRepository)(nil).GetState), ctx, key)
}

// RemoveState mocks base method.
func (m *MockStateRepository) RemoveState(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveState", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveState indicates an expected call of RemoveState.
func (mr *MockStateRepositoryMockRecorder) RemoveState(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveState", reflect.TypeOf((*MockStateRepository)(nil).RemoveState), ctx, key)
}

// SetState mocks base method.
func (m *MockStateRepository) SetState(ctx context.Context, key, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", ctx, key, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockStateRepositoryMockRecorder) SetState(ctx, key, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateRepository)(nil).SetState), ctx, key, state)
}
