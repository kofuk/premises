// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kofuk/premises/runner/internal/commands/mclauncher/core (interfaces: SettingsRepository)
//
// Generated by this command:
//
//	mockgen -destination settings_mock.go -package core . SettingsRepository
//

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSettingsRepository is a mock of SettingsRepository interface.
type MockSettingsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsRepositoryMockRecorder
	isgomock struct{}
}

// MockSettingsRepositoryMockRecorder is the mock recorder for MockSettingsRepository.
type MockSettingsRepositoryMockRecorder struct {
	mock *MockSettingsRepository
}

// NewMockSettingsRepository creates a new mock instance.
func NewMockSettingsRepository(ctrl *gomock.Controller) *MockSettingsRepository {
	mock := &MockSettingsRepository{ctrl: ctrl}
	mock.recorder = &MockSettingsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsRepository) EXPECT() *MockSettingsRepositoryMockRecorder {
	return m.recorder
}

// GetAllowedMemSize mocks base method.
func (m *MockSettingsRepository) GetAllowedMemSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedMemSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAllowedMemSize indicates an expected call of GetAllowedMemSize.
func (mr *MockSettingsRepositoryMockRecorder) GetAllowedMemSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedMemSize", reflect.TypeOf((*MockSettingsRepository)(nil).GetAllowedMemSize))
}

// GetDataDir mocks base method.
func (m *MockSettingsRepository) GetDataDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDataDir indicates an expected call of GetDataDir.
func (mr *MockSettingsRepositoryMockRecorder) GetDataDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataDir", reflect.TypeOf((*MockSettingsRepository)(nil).GetDataDir))
}

// GetDesiredJavaVersion mocks base method.
func (m *MockSettingsRepository) GetDesiredJavaVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDesiredJavaVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDesiredJavaVersion indicates an expected call of GetDesiredJavaVersion.
func (mr *MockSettingsRepositoryMockRecorder) GetDesiredJavaVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDesiredJavaVersion", reflect.TypeOf((*MockSettingsRepository)(nil).GetDesiredJavaVersion))
}

// GetServerPath mocks base method.
func (m *MockSettingsRepository) GetServerPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerPath indicates an expected call of GetServerPath.
func (mr *MockSettingsRepositoryMockRecorder) GetServerPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerPath", reflect.TypeOf((*MockSettingsRepository)(nil).GetServerPath))
}
