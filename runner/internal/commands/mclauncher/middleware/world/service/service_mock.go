// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kofuk/premises/runner/internal/commands/mclauncher/middleware/world/service (interfaces: WorldServiceInterface)
//
// Generated by this command:
//
//	mockgen -destination service_mock.go -package service . WorldServiceInterface
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	env "github.com/kofuk/premises/runner/internal/env"
	gomock "go.uber.org/mock/gomock"
)

// MockWorldServiceInterface is a mock of WorldServiceInterface interface.
type MockWorldServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorldServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockWorldServiceInterfaceMockRecorder is the mock recorder for MockWorldServiceInterface.
type MockWorldServiceInterfaceMockRecorder struct {
	mock *MockWorldServiceInterface
}

// NewMockWorldServiceInterface creates a new mock instance.
func NewMockWorldServiceInterface(ctrl *gomock.Controller) *MockWorldServiceInterface {
	mock := &MockWorldServiceInterface{ctrl: ctrl}
	mock.recorder = &MockWorldServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldServiceInterface) EXPECT() *MockWorldServiceInterfaceMockRecorder {
	return m.recorder
}

// DownloadWorld mocks base method.
func (m *MockWorldServiceInterface) DownloadWorld(ctx context.Context, resourceID string, envProvider env.EnvProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadWorld", ctx, resourceID, envProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadWorld indicates an expected call of DownloadWorld.
func (mr *MockWorldServiceInterfaceMockRecorder) DownloadWorld(ctx, resourceID, envProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWorld", reflect.TypeOf((*MockWorldServiceInterface)(nil).DownloadWorld), ctx, resourceID, envProvider)
}

// GetLatestResourceID mocks base method.
func (m *MockWorldServiceInterface) GetLatestResourceID(ctx context.Context, worldName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestResourceID", ctx, worldName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestResourceID indicates an expected call of GetLatestResourceID.
func (mr *MockWorldServiceInterfaceMockRecorder) GetLatestResourceID(ctx, worldName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestResourceID", reflect.TypeOf((*MockWorldServiceInterface)(nil).GetLatestResourceID), ctx, worldName)
}

// UploadWorld mocks base method.
func (m *MockWorldServiceInterface) UploadWorld(ctx context.Context, worldName string, envProvider env.EnvProvider) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadWorld", ctx, worldName, envProvider)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadWorld indicates an expected call of UploadWorld.
func (mr *MockWorldServiceInterfaceMockRecorder) UploadWorld(ctx, worldName, envProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadWorld", reflect.TypeOf((*MockWorldServiceInterface)(nil).UploadWorld), ctx, worldName, envProvider)
}
