// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kofuk/premises/runner/internal/commands/mclauncher/middleware/monitoring/watchdog (interfaces: Watchdog)
//
// Generated by this command:
//
//	mockgen -destination watchdog_mock.go -package watchdog . Watchdog
//

// Package watchdog is a generated GoMock package.
package watchdog

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWatchdog is a mock of Watchdog interface.
type MockWatchdog struct {
	ctrl     *gomock.Controller
	recorder *MockWatchdogMockRecorder
	isgomock struct{}
}

// MockWatchdogMockRecorder is the mock recorder for MockWatchdog.
type MockWatchdogMockRecorder struct {
	mock *MockWatchdog
}

// NewMockWatchdog creates a new mock instance.
func NewMockWatchdog(ctrl *gomock.Controller) *MockWatchdog {
	mock := &MockWatchdog{ctrl: ctrl}
	mock.recorder = &MockWatchdogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchdog) EXPECT() *MockWatchdogMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockWatchdog) Check(ctx context.Context, watchID int, status *Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, watchID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockWatchdogMockRecorder) Check(ctx, watchID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockWatchdog)(nil).Check), ctx, watchID, status)
}

// Name mocks base method.
func (m *MockWatchdog) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWatchdogMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWatchdog)(nil).Name))
}
