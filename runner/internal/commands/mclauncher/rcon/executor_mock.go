// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kofuk/premises/runner/internal/commands/mclauncher/rcon (interfaces: RconExecutorInterface)
//
// Generated by this command:
//
//	mockgen -destination executor_mock.go -package rcon . RconExecutorInterface
//

// Package rcon is a generated GoMock package.
package rcon

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRconExecutorInterface is a mock of RconExecutorInterface interface.
type MockRconExecutorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRconExecutorInterfaceMockRecorder
	isgomock struct{}
}

// MockRconExecutorInterfaceMockRecorder is the mock recorder for MockRconExecutorInterface.
type MockRconExecutorInterfaceMockRecorder struct {
	mock *MockRconExecutorInterface
}

// NewMockRconExecutorInterface creates a new mock instance.
func NewMockRconExecutorInterface(ctrl *gomock.Controller) *MockRconExecutorInterface {
	mock := &MockRconExecutorInterface{ctrl: ctrl}
	mock.recorder = &MockRconExecutorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRconExecutorInterface) EXPECT() *MockRconExecutorInterfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockRconExecutorInterface) Exec(cmd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", cmd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockRconExecutorInterfaceMockRecorder) Exec(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRconExecutorInterface)(nil).Exec), cmd)
}
